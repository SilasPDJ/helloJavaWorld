package helloWorld;

import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

public class desafioPrePascoa {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		int[] ex1Nums = { 5, 7, 9, 11, 13 };
		for (int i : ex1Nums) {
			ex1(i);
		}

		separatorPrint("~", 60);
		for (int i = 5; i <= 10; i++) {
			ex2(i);
		}
		separatorPrint("~", 60);
		ex3();
	}

	public static void ex3() {

		int gameMinNum, gameMaxNum;
		gameMinNum = 1;
		gameMaxNum = 60;

		int[] senaResult = getSenaSorteio(6, gameMinNum, gameMaxNum, true);
		int betNumSize = 6;
		Scanner input = new Scanner(System.in);

		// TAMANHO DA APOSTA
		separatorPrint("_~MEGA-SENA~_", 6);
		separatorPrint("~", 60);
		System.out.print("Quantos números deseja utilizar? Escolha [6, 7 ou 8]: ");
		betNumSize = input.nextInt();
		if (betNumSize >= 6 && betNumSize <= 8) {

		} else {
			System.out.println("Valor digitado inválido. A aposta terá 6 números");
			betNumSize = 6;
		}

		// -----------------
		boolean automatizaSorteio = userWantsAutoGenerated();
		// gerar jogada de acordo com a escolha do usuário
		int[] jogadaArr = new int[betNumSize];
		if (automatizaSorteio == false) {
			for (int i = 0; i < betNumSize; i++) {
				while (jogadaArr[i] < gameMinNum || jogadaArr[i] > gameMaxNum) {
					System.out.printf("Digite o %2dº número: ", i + 1);
					jogadaArr[i] = input.nextInt();
				}
			}

		} else {
			jogadaArr = getSenaSorteio(betNumSize, gameMinNum, gameMaxNum, true);
		}
		// Arrays.sort(jogada);

		//// Apura acertos
		int contAcertos = 0;
		for (int i = 0; i < jogadaArr.length; i++) {

			for (int numSenaResult : senaResult) {
				if (jogadaArr[i] == numSenaResult) {
					contAcertos++;
				}
			}
		}
		System.out.print("NÚMEROS DO JOGADOR: ");
		printArray(jogadaArr);
		System.out.print("O RESULTADO SORTEADO É: ");
		printArray(senaResult);

		if (contAcertos < 3) {
			System.out.printf("NÃO HOUVE GANHOS! Teve %2d acertos", contAcertos);
		} else {
			String resultadoNomenclatura = contAcertos == 4 ? "QUADRA"
					: contAcertos == 5 ? "QUINA" : contAcertos == 6 ? "SENA" : "não é megasena!";
			System.out.printf("PARABÉNS. Essa jogada com %2d acertos lhe rendou uma %s", contAcertos,
					resultadoNomenclatura);
		}
		System.out.println("");

	}

	private static boolean userWantsAutoGenerated() {
		String[] gerarDigitarPossibleAnswers = { "S", "N", "Y" };
		String gerarDigitar = "";
		Scanner input = new Scanner(System.in);

		boolean gerarDigitarOk = false;
		while (!gerarDigitarOk) {
			System.out.println("DESEJA GERAR DE MODO AUTOMÁTICO E ALEATÓRIO A SUA JOGADA? ");
			System.out.println("S ou Y para confirmar. N para preencher manualmente");
			gerarDigitar = input.next();
			gerarDigitar = gerarDigitar.strip().toUpperCase();
			for (String gdPA : gerarDigitarPossibleAnswers) {
				if (gdPA.equals(gerarDigitar)) {
					gerarDigitarOk = true;

				}
			}
			if (!gerarDigitarOk) {
				System.out.println("Tente novamente!");
			}
		}

		if (gerarDigitar.equals("N")) {
			return false;
		} else
			return true;

	}

	private static void printArray(int[] array) {
		int i;
		for (i = 0; i < array.length; i++) {
			System.out.printf("%1d ", array[i]);
		}
		System.out.println("\n");
	}

	private static int[] getSenaSorteio(int tam, int min, int max, boolean semRepetir) {
		int i, r;
		int[] arr = new int[tam];
		Random random = new Random();
		for (i = 0; i < arr.length; i++) {
			arr[i] = random.nextInt(min, max);
			if (semRepetir) {
				for (r = 0; r < tam; r++) {
					if (i != r) {
						while (arr[i] == arr[r] || arr[i] == 0) {// NÃO irei adicionar valores com 0 por causa do array
																	// intersecção
							arr[i] = random.nextInt(min, max);
						}
					}
				}
			}
		}
		Arrays.sort(arr);
		return arr;
	}

	public static void ex2(int n) {
		int row, col;
		int sum2terms;
		int[][] trianguloPascoal = new int[n][n];

		int val = 1;
		sum2terms = 0;

		for (row = 0; row < trianguloPascoal.length; row++) {
			for (col = 0; col < trianguloPascoal.length; col++) {
				if (col <= row) {
					if (row <= 1 || col == 0 || col == row) {
						trianguloPascoal[row][col] = val;
					} else {
						sum2terms = trianguloPascoal[row - 1][col - 1] + trianguloPascoal[row - 1][col];
						trianguloPascoal[row][col] = sum2terms;

					}
				}
			}
		}
		// Print it!
		for (row = 0; row < trianguloPascoal.length; row++) {
			for (col = 0; col < trianguloPascoal.length; col++) {
				if (col <= row) {
					System.out.printf("%4d", trianguloPascoal[row][col]);
				}
			}
			System.out.println("");
		}
		System.out.println("");
	}

	public static void ex1(int n) {
		int val;
		int i, j;
		int size;
//		n = 5;
		val = 0;

		// check-in before proceed
		if (n % 2 == 0) {
			throw new IllegalArgumentException("valor INVÁLIDO" + n + "Deve ser um número ÍMPAR");
		}

		int middlePos = (n - 1) / 2;

		int[][] caracol = new int[n][n];
		int fcontMax = getFcontRange(n);

		// INIT pt1
		size = 2;
		i = middlePos;
		for (j = i; j <= i + 1; j++) {
			val++;
			caracol[i][j] = val;
		}

		/* INIT pt2 */
		size++;
		i--;
		j = middlePos + 1;
		for (int c = 0; c < size; c++) {
			val++;
			caracol[i][j] = val;
			j--;

		}
		j++;
		for (int c = 0; c < size; c++) {
			caracol[i][j] = val;
			val++;
			i++;

		}
		/* INIT 2 */

		for (int fcont = 0; fcont <= fcontMax; fcont++) {
			if (n > 5 && fcont >= 1) { // checa se n > 5
				size++;
			} else if (fcont < 1) {
				size++;
			}

			////////// //////////////////

			i--;
			j++;
			for (int c = 1; c < size; c++) {
				try {
					caracol[i][j] = val;
					val++;
					j++;
				} catch (IndexOutOfBoundsException io) {

				}

			}
			if (val >= n * n) {
				break;
			}

			//
			j--;
			i--;
			for (int c = 1; c < size; c++) {
				caracol[i][j] = val;
				val++;
				i--;

			}
			////
			i++;
			j--;
			for (int c = 0; c < size; c++) {
				caracol[i][j] = val;
				val++;
				j--;

			}
			//
			size++;
			i++;
			j++;
			for (int c = 1; c < size; c++) {
				caracol[i][j] = val;
				val++;
				i++;
			}
			//
		}
		printMatriz2d(caracol);
	}

	private static int getFcontRange(int n) {
		if (n % 2 == 0) {
			return 0;
		}
		return n;

	}

	private static void printMatriz2d(int[][] array2d) {
		int i, j, numCols, numRows;

		// matriz
		numRows = array2d.length;
		numCols = array2d[0].length;

		for (i = 0; i < numRows; i++) {
			for (j = 0; j < numCols; j++) {
				System.out.printf("%4d ", array2d[i][j]);
			}
			System.out.println("");
		}

		separatorPrint("~", 5 * numCols);
	}

	protected static void separatorPrint(String sep, int qtd) {
		String repeated = new String(new char[qtd]).replace("\0", sep);
		System.out.println(repeated);
	}

}

// 2,2    /2
// 2,3   
// 1,3
// 1,2   / 3
// 1,1

// 2,1   / 3

// 3,1
// 3,2 /// 3
// 3,3

// 3,4  ///// 4
// 2,4
// 1,4
// 0,4
// 0,3
// 0,2 ////// 4
// 0,1
//0,0
//1,0  // 5
//2,0
//3,0
//4,0
//4,1
//4,2 //// 5
//4,3
//4,4
